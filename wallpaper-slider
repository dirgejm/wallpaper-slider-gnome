#!/bin/bash

# script to setup wallpaper-slider, user can enter the path to their wallpaper directory and a delay
function get_path {
    FORMAT=/path/to/your/wallpapers/WALLPAPERS/
    PATH_PATTERN="^/.*$"
    echo Directory must only contain png, jpeg, or svg files
    echo Enter full path to wallpapers folder: $FORMAT
    read path
    if [[ $path =~ $PATH_PATTERN ]] && [[ -d "$path" ]]; then

        for file in "$path"/*; do
            if ! [ -f "$file" ]; then
                echo detected subdirectory, terminating process...
                return
            fi

            file_type=$(file -b --mime-type "$file")
            
            if [ "$file_type" != "image/jpeg" ] && [ "$file_type" != "image/png" ] && [ "$file_type" != "image/svg" ]; then
                echo  detected file format other than png / jpeg / svg, terminating process...
                echo
                echo file: $file
                echo file type: $file_type
                return
            fi
        done

        echo Path to wallpapers: $path
        echo $path | cat > $HOME/wallpaper-slider-data/data/path.txt
        return
    else
        echo Invalid directory. Enter in format $FORMAT
        get_path
    fi
}

function enter_delay {
    FORMAT="Format: '5m' (5 minutes) | '8h' (8 hours) | '1d' (1 day)"
    echo "Enter time delay | [$FORMAT]"
    echo "Example: for an interval of 10 minutes, you would enter '10m'"
    read delay

    delay_length=${#delay}

    # checks $delay contains only integers apart from last char
    for ((i = 0; i < delay_length - 1; i++)); do
        char="${delay:i:1}"
        if ! [[ "$char" =~ [0-9] ]]; then
            echo Invalid. $FORMAT
            enter_delay
        fi
    done

    # writes the entered delay into txt file to be used by wallpaper_slider.py
    if [[ "$delay" == *m ]]; then
        echo Wallpaper change delay: ${delay%?} minutes
        echo $delay | cat > $HOME/wallpaper-slider-data/data/delay.txt
        return
    elif [[ "$delay" == *h ]]; then
        echo Wallpaper change delay: ${delay%?} hours
        echo $delay | cat > $HOME/wallpaper-slider-data/data/delay.txt
        return
    elif [[ "$delay" == *d ]]; then
        echo Wallpaper change delay: ${delay%?} days
        echo $delay | cat > $HOME/wallpaper-slider-data/data/delay.txt
        return
    else
        echo Invalid. $FORMAT
    fi
}

function print_version {
    echo
    echo "-------------------------------------------------------------------------------"
    echo
    echo wallpaper_slider version: $(<$HOME/wallpaper-slider-data/data/version.txt)
    echo
    echo "-------------------------------------------------------------------------------"
    echo
}

function print_entered_info {
    service_file="/etc/systemd/system/$script_name"
    delay=$(<$HOME/wallpaper-slider-data/data/delay.txt)
    echo Wallpaper folder path:
    echo $(<$HOME/wallpaper-slider-data/data/path.txt)
    echo Wallpaper change delay:

    if [[ $delay == *m ]]; then
        echo ${delay%?} minutes
    elif [[ $delay == *h ]]; then
        echo ${delay%?} hours
    elif [[ $delay == *d ]]; then
        echo ${delay%?} days
    fi
    echo Set to run on startup?
    if [[ -f $service_file ]]; then
        echo True
    else
        echo False
    fi
}

function help {
    
    echo
    echo "Options:"
    echo
    echo "-p     Enter path to wallpapers directory"
    echo
    echo "-d     Enter time delay between wallpaper changes in Seconds/Minutes/Hours/Days"
    echo
    echo "-a     Activates wallpaper-slider script. If already active, stops the wallpaper-slider script"
    echo
    echo "-r     Set wallpaper-slider to run on startup. If already set to run on startup, running this command again will remove the startup script"
    echo
    echo "-v     Print software version"
    echo
    echo "-i     Print user's settings"
    echo
    echo "-h     Print this help"
    echo
}

#make python venv
function run {

    USER_NAME=$(logname)

    script_name="wallpaper-slider-startup.service"
    service_file="/home/$USER_NAME/.config/systemd/user/$script_name"
    script_path="/home/$USER_NAME/wallpaper-slider-data/.bin/wallpaper_slider.py"

    if [[ -f $service_file ]]; then
        echo wallpaper-slider: deactivating run on startup...
        systemctl --user disable $script_name
        systemctl --user daemon-reload
        rm "$service_file"
        exit 0
    fi

    echo wallpaper-slider: setting to run on startup...
    
    # creates systemmd service file
    cat <<EOF > $service_file
[Unit]
Description=Run wallpaper-slider Python script at startup
After=network.target

[Service]
ExecStart=/usr/bin/python3 $script_path
Restart=on-failure
RestartSec=5

[Install]
WantedBy=multi-user.target
EOF


    systemctl --user daemon-reload
    systemctl --user enable --now "$script_name"
}

# Runs the script, stops script if already running
function activate {
    USER_NAME=$(logname)
    script_path="/home/$USER_NAME/wallpaper-slider-data/.bin/wallpaper_slider.py"

    if pgrep -f "wallpaper_slider.py" > /dev/null; then
        echo wallpaper-slider: deactivating script...
        pkill -f "wallpaper_slider.py"
        exit 0
    fi

    echo wallpaper-slider: running script...
    nohup python3 "$script_path" > /dev/null 2>&1 &
    exit 0

}


if [[ $# -eq 0 ]]; then
    echo "wallpaper-slider: try -h for help"
    exit 1
fi

while getopts "p d v i r a h" option; do
    case $option in
        p)  # user enters absolute path to wallpapers
            get_path
            exit
            ;;
        
        d)  # user enters time delay
            enter_delay
            exit
            ;;
        
        v)  # displays software version
            print_version
            exit
            ;;
        
        i)  # displays current settings - path, delay
            print_entered_info
            exit
            ;;

        r)  # runs the program and sets it to run on startup
            run
            exit
            ;;

        a)  # stops running the program
            activate
            exit
            ;;

        h) # display help
            help
            exit
            ;;
        
        *) # if unknown, exits
            echo "wallpaper-slider: wrong invocation, try -h for options."
            exit
            ;;
    esac
done