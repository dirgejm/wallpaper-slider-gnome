#!/bin/bash

function get_path {
    FORMAT=/path/to/your/wallpapers/WALLPAPERS/
    PATH_PATTERN="^/.*$"
    echo Directory must only contain png, jpeg, svg, tiff, and gif files.
    echo Enter full path to wallpapers folder: $FORMAT
    echo Example: /home/james/backgrounds/
    echo
    read path
    if [[ $path =~ $PATH_PATTERN ]] && [[ -d "$path" ]]; then

        for file in "$path"/*; do
            if ! [ -f "$file" ]; then
                echo Detected subdirectory, terminating process...
                exit 0
            fi

            file_type=$(file -b --mime-type "$file")
            
            if [ "$file_type" != "image/jpeg" ] && [ "$file_type" != "image/png" ] && [ "$file_type" != "image/svg" ] && [ "$file_type" != "image/svg+xml" ] && [ "$file_type" != "image/tiff" ] && [ "$file_type" != "image/gif" ]; then
                echo  Detected file format other than png / jpeg / svg, terminating process...
                echo
                echo File: $file
                echo File type: $file_type
                exit 0
            fi
        done

        echo Path to wallpapers: $path
        echo $path | cat > $HOME/wallpaperslider/data/path.txt
        exit 0
    else
        echo Invalid directory. Enter in format $FORMAT
        get_path
    fi
}

function enter_delay {
    FORMAT="Format: '5m' (5 minutes) | '8h' (8 hours) | '1d' (1 day)"
    echo "Enter time delay | [$FORMAT]"
    echo "Example: For an interval of 10 minutes enter '10m'."
    echo
    read delay

    delay_length=${#delay}

    # Checks $delay contains only integers apart from last char
    for ((i = 0; i < delay_length - 1; i++)); do
        char="${delay:i:1}"
        if ! [[ "$char" =~ [0-9] ]]; then
            echo Invalid. $FORMAT
            enter_delay
        fi
    done

    # Writes the entered delay into txt file to be used by wallpaper_slider.py
    if [[ "$delay" == *m ]]; then
        echo Wallpaper change delay: ${delay%?} minutes.
        echo $delay | cat > $HOME/wallpaperslider/data/delay.txt
    elif [[ "$delay" == *h ]]; then
        echo Wallpaper change delay: ${delay%?} hours.
        echo $delay | cat > $HOME/wallpaperslider/data/delay.txt
    elif [[ "$delay" == *d ]]; then
        echo Wallpaper change delay: ${delay%?} days.
        echo $delay | cat > $HOME/wallpaperslider/data/delay.txt
    else
        echo Invalid. $FORMAT
    fi

    if pgrep -af "/usr/bin/python3 /home/$(logname)/wallpaperslider/.bin/wallpaper_slider.py" > /dev/null; then
        echo Restarting script...
        systemctl --user restart wallpaper-slider.service
        echo Done!
        exit 0
    fi
}

function print_information {
    USER_NAME=$(logname)
    service_name="wallpaper-slider.service"
    service_file_home="/home/$USER_NAME/.config/systemd/user/$service_name"
    service_file_sys="/etc/systemd/user/$service_name"
    delay=$(<$HOME/wallpaperslider/data/delay.txt)
    echo Wallpaper folder path:
    echo $(<$HOME/wallpaperslider/data/path.txt)
    echo Wallpaper change delay:

    if [[ $delay == *m ]]; then
        echo ${delay%?} minutes
    elif [[ $delay == *h ]]; then
        echo ${delay%?} hours
    elif [[ $delay == *d ]]; then
        echo ${delay%?} days
    fi
    echo Set to run on startup?
    if [[ -f $service_file_home ]]; then
        echo True
    elif [[ -f $service_file_sys ]]; then
        echo True
    else
        echo False
    fi

    echo
    echo "------------------------------------------------------------"
    echo
    echo wallpaper_slider version: $(<$HOME/wallpaperslider/data/version.txt)
    echo
    echo "------------------------------------------------------------"
    echo
}

function help {
    
    echo
    echo "Options:"
    echo
    echo "-p     Enter path to wallpapers directory."
    echo
    echo "-d     Enter time delay between wallpaper changes in Seconds/Minutes/Hours/Days."
    echo
    echo "-r     Set wallpaper-slider to run on startup. If already set to run on startup, running this command again will remove the startup script (Might require SUDO)."
    echo
    echo "-i     Print user's settings and software information."
    echo
    echo "-h     Print this help."
    echo
}

#make python venv
function run {

    if ! [[ -s /home/$(logname)/wallpaperslider/data/delay.txt ]] || [[ -s /home/$(logname)/wallpaperslider/data/path.txt ]]; then
        echo Please first enter a path and delay before running the program.
        echo "Enter a path with 'wallpaper-slider -p'."
        echo "Enter a delay interval with 'wallpaper-slider -d'." 
        echo Terminating process...
        exit 0
    fi
    
    USER_NAME=$(logname)

    service_name="wallpaper-slider.service"
    service_file_home="/home/$USER_NAME/.config/systemd/user/$service_name"
    # service_file_sys="/etc/systemd/system/$service_name"
    script_path="/home/$USER_NAME/wallpaperslider/.bin/wallpaper_slider.py"

    if [[ -f $service_file_home ]]; then
        echo wallpaper-slider: Deactivating run on startup...
        systemctl --user disable $service_name
        systemctl --user daemon-reload
        rm "$service_file_home"
        exit 0
    fi

    echo wallpaper-slider: Enabling run on startup...
    
    # Checks if os has user level systemd directory, if not then creates the necessary directories
    if ! [[ -d "/home/$USER_NAME/.config/systemd/user/" ]]; then
        echo Home systemd directory not detected, creating /home/$USER_NAME/.config/systemd/user/ directories...
        mkdir -p ~/.config/systemd/user/
        cat <<EOF > $service_file_home
[Unit]
Description=Run wallpaper-slider Python script at startup
After=network.target

[Service]
ExecStart=/usr/bin/python3 $script_path
Restart=on-failure
RestartSec=5

[Install]
WantedBy=default.target
EOF

        if [[ -f $service_file_home ]]; then
            echo Service file in user home directory created successfully!
        fi

        systemctl --user daemon-reload
        systemctl --user enable --now "$service_name"
        exit 0
    fi

    echo Placing in home systemd directory...
    # creates systemmd service file
    cat <<EOF > $service_file_home
[Unit]
Description=Run wallpaper-slider Python script at startup
After=network.target

[Service]
ExecStart=/usr/bin/python3 $script_path
Restart=on-failure
RestartSec=5

[Install]
WantedBy=default.target
EOF


    systemctl --user daemon-reload
    systemctl --user enable --now "$service_name"
}

if [[ $# -eq 0 ]]; then
    echo "wallpaper-slider: Try -h for help."
    exit 1
fi

while getopts "p d v i r h" option; do
    case $option in
        p)  # user enters absolute path to wallpapers
            get_path
            exit
            ;;
        
        d)  # user enters time delay
            enter_delay
            exit
            ;;
        
        i)  # displays current settings - path, delay
            print_information
            exit
            ;;

        r)  # runs the program and sets it to run on startup
            run
            exit
            ;;


        h) # display help
            help
            exit
            ;;
        
        *) # if unknown, exits
            echo "wallpaper-slider: Wrong invocation, try -h for options."
            exit
            ;;
    esac
done